<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/01/15/python%E4%B8%AD%E7%9A%84%E9%97%AD%E5%8C%85%E5%92%8C%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <url>/2024/01/15/python%E4%B8%AD%E7%9A%84%E9%97%AD%E5%8C%85%E5%92%8C%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="python中的闭包和装饰器"><a href="#python中的闭包和装饰器" class="headerlink" title="python中的闭包和装饰器"></a>python中的闭包和装饰器</h2><hr><p>title: python中的闭包和装饰器</p><p>date: 2024-01-14 16:35:20 </p><p>tags: - 原创 </p><p>categories: - python</p><hr><h3 id="引入闭包"><a href="#引入闭包" class="headerlink" title="引入闭包"></a>引入闭包</h3><p>在python的函数中，变量的作用域是有生命周期的，在函数运行完成以后，函数中的变量便会死去。出于种种原因，我们有时候需要在函数外部得到函数内的局部变量。但是，由于<a href="https://zhuanlan.zhihu.com/p/400388568">Python中作用域的搜索顺序</a>（”链式作用域”结构（chain scope）：子对象会一级一级地向上寻找所有父对象的变量），这一点通常是无法实现的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 函数中的变量的作用域</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun1</span>():<br>    n = <span class="hljs-number">1000</span><br><br><span class="hljs-built_in">print</span>(n)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/01/14/hbsoOEzdrnA3B8L.png" alt="image-20240114163423406"></p><p>在函数的外部访问函数内部的变量会报错，函数中的变量作用域是局部变量，在全局环境中无法访问。如果想要能够访问函数中的变量，可以在函数中再建立一个函数，然后返回函数中的内部函数，内部函数中再返回函数中的变量，这样就可以访问函数中的变量了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun1</span>():<br>    n = <span class="hljs-number">999</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fun2</span>():<br>        <span class="hljs-built_in">print</span>(n)<br>    <span class="hljs-keyword">return</span> fun2<br><br>var = fun1()<br>var()<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/01/14/5ux7zXi8J3YryVM.png" alt="image-20240114164022916"></p><p>从上面的程序中可以看出，外部函数的返回值是一个函数地址，调用函数地址就可以使用返回的函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun3</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello word&quot;</span>)<br><br><br><span class="hljs-built_in">print</span>(fun3)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/01/14/TWnB7HyDNSwbx3z.png" alt="image-20240114164410201"></p><h3 id="闭包的概念"><a href="#闭包的概念" class="headerlink" title="闭包的概念"></a>闭包的概念</h3><p>在一个外函数中定义了一个内函数，内函数里运用了外函数的临时变量，并且外函数的返回值是内函数的引<br>用。这样就构成了一个闭包。</p><p>一般情况下，在我们认知当中，如果一个函数结束，函数的内部所有东西都会释放掉，还给内存，局部变量都会消失。但是闭包是一种特殊情况，如果外函数在结束的时候发现有自己的临时变量将来会在内部函数中用到，就把这个临时变量绑定给了内部函数，然后自己再结束。</p><ul><li>作用1：闭包是将外层函数内的局部变量和外层函数的外部连接起来的一座桥梁。</li><li>作用2：将外层函数的变量持久地保存在内存中。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x,y</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">z</span>):<br>        <span class="hljs-keyword">return</span> x+y+z<br>    <span class="hljs-keyword">return</span> f<br><br>d = add(<span class="hljs-number">5</span>,<span class="hljs-number">6</span>)<br><span class="hljs-built_in">print</span>(d(<span class="hljs-number">9</span>))<br><span class="hljs-built_in">print</span>(d(<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/01/14/5mYruainXA9JToO.png" alt="image-20240114170539463"></p><h3 id="引入装饰器"><a href="#引入装饰器" class="headerlink" title="引入装饰器"></a>引入装饰器</h3><p>实现一个应用，在函数执行之前输出befor，在函数执行之后使用after。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用最粗暴的方法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;before&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我是func函数&#x27;</span>)<br>    value = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;after&quot;</span>)<br>    <span class="hljs-keyword">return</span> value<br><span class="hljs-comment"># 调用func函数</span><br>func()<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/01/14/n8bNDrgXOVBf3w4.png" alt="image-20240114235427163"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用闭包</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我是func函数&#x27;</span>)<br>    value = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>    <span class="hljs-keyword">return</span> value<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">f</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner_func</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;before&quot;</span>)<br>        result = f()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;after&quot;</span>)<br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-keyword">return</span> inner_func<br><br><br>func2 = func1(func)<br>result = func2()<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/01/15/tAdCaV9wOWFHech.png" alt="image-20240115000425465"></p><p>上方的func1(func)的结果是获得inner_func的函数地址，result的结果是调用inner_func函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我是func函数&#x27;</span>)<br>    value = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>    <span class="hljs-keyword">return</span> value<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">f</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner_func</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;inner_func的函数地址<span class="hljs-subst">&#123;inner_func&#125;</span>&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;before&quot;</span>)<br>        result = f()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;after&quot;</span>)<br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-keyword">return</span> inner_func<br><br><br>func2 = func1(func)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;func2的地址是<span class="hljs-subst">&#123;func2&#125;</span>&quot;</span>)<br>result = func2()<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/01/15/qs3hUaY89zWLwMc.png" alt="image-20240115003213204"></p><p>在python中可以使用装饰器来简化上方的过程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">f</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner_func</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;inner_func的函数地址<span class="hljs-subst">&#123;inner_func&#125;</span>&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;before&quot;</span>)<br>        result = f()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;after&quot;</span>)<br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-keyword">return</span> inner_func<br><br><br><span class="hljs-meta">@func1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;func函数的地址是<span class="hljs-subst">&#123;func&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我是func函数&#x27;</span>)<br>    value = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>    <span class="hljs-keyword">return</span> value<br><br><br>func()<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/01/15/bGMq93h25iLJ6uV.png" alt="image-20240115004506286"></p><h3 id="装饰器添加参数"><a href="#装饰器添加参数" class="headerlink" title="装饰器添加参数"></a>装饰器添加参数</h3><p>上面的例子都是无参函数，如果是有参数的函数，上面的程序是否还有正确运行呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">f</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner_func</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;inner_func的函数地址<span class="hljs-subst">&#123;inner_func&#125;</span>&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;before&quot;</span>)<br>        result = f()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;after&quot;</span>)<br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-keyword">return</span> inner_func<br><br><br><span class="hljs-meta">@func1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">a</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;func函数的地址是<span class="hljs-subst">&#123;func&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我是func函数&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;函数的参数是:<span class="hljs-subst">&#123;a&#125;</span>&quot;</span>)<br>    value = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>    <span class="hljs-keyword">return</span> value<br><br><br>func(a=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/01/15/XPn89TWm47Cev3b.png" alt="image-20240115004956314"></p><p>在函数中添加*args和**kwargs</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">f</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner_func</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;inner_func的函数地址<span class="hljs-subst">&#123;inner_func&#125;</span>&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;before&quot;</span>)<br>        result = f(*args, **kwargs)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;after&quot;</span>)<br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-keyword">return</span> inner_func<br><br><br><span class="hljs-meta">@func1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">a</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;func函数的地址是<span class="hljs-subst">&#123;func&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我是func函数&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;函数的参数是:<span class="hljs-subst">&#123;a&#125;</span>&quot;</span>)<br>    value = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>    <span class="hljs-keyword">return</span> value<br><br><br>func(a=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/01/15/ejLG8qOrfdpsZgR.png" alt="image-20240115010955515"></p><h3 id="装饰器扩展"><a href="#装饰器扩展" class="headerlink" title="装饰器扩展"></a>装饰器扩展</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">f</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner_func</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;这是inner_func函数&quot;&quot;&quot;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;before&quot;</span>)<br>        result = f(*args, **kwargs)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;after&quot;</span>)<br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-keyword">return</span> inner_func<br><br><br><span class="hljs-meta">@func1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">a</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;这是func函数&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我是func函数&#x27;</span>)<br>    value = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>    <span class="hljs-keyword">return</span> value<br><br><br><span class="hljs-built_in">print</span>(func.__doc__)<br><span class="hljs-built_in">print</span>(func.__name__)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/01/15/DIHiOhUlbckXSoP.png" alt="image-20240115011512053"></p><p>在函数中答应文档信息和函数名称，可以很明显的看出当func函数使用装饰器装饰后，文档和函数名均输出为inner_func的函数名和doc文档。这也与上方的闭包符合。如果想打印出func函数的文档信息和函数名称的话，需要使用functiontools函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> functools<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">f</span>):<br><span class="hljs-meta">    @functools.wraps(<span class="hljs-params">f</span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner_func</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;这是inner_func函数&quot;&quot;&quot;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;before&quot;</span>)<br>        result = f(*args, **kwargs)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;after&quot;</span>)<br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-keyword">return</span> inner_func<br><br><br><span class="hljs-meta">@func1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">a</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;这是func函数&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我是func函数&#x27;</span>)<br>    value = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>    <span class="hljs-keyword">return</span> value<br><br><br>func(a=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(func.__name__)<br><span class="hljs-built_in">print</span>(func.__doc__)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/01/15/Lw9txQuzCXVnbiH.png" alt="image-20240115012317116"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2024/01/09/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2024/01/09/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
